name: Build packages
on:
  push:
    tags:
      - v[0-9]+.[0-9]+**
jobs:
  debian:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Prepare Version
        id: prep
        run: |
          echo ::set-output name=user::$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=repo::$(echo "${{ github.repository }}" | awk -F / '{print $2}' | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
      - name: Build
        run: |
          cd debian
          ./build.sh "${{ steps.prep.outputs.user }}-${{ steps.prep.outputs.repo }}" "${{ steps.prep.outputs.version }}"
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.prep.outputs.user }}-${{ steps.prep.outputs.repo }}_${{ steps.prep.outputs.version }}.deb
          path: debian/build/${{ steps.prep.outputs.user }}-${{ steps.prep.outputs.repo }}_${{ steps.prep.outputs.version }}.deb
  docker:
    runs-on: ubuntu-latest
    needs: debian
    if: ${{ false }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: Debian package
      - name: Prepare Version
        id: prep
        run: |
          echo ::set-output name=user::$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=repo::$(echo "${{ github.repository }}" | awk -F / '{print $2}' | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
      - name: Build and push docker image for ${{ github.job }}
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile
          build-args: |
            VERSION=${{ steps.prep.outputs.version }}
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.prep.outputs.version }}
          push: true
  gh-release:
    runs-on: ubuntu-latest
    needs:
      - debian
    steps:
      - name: Prepare Version
        id: prep
        run: |
          echo ::set-output name=user::$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=repo::$(echo "${{ github.repository }}" | awk -F / '{print $2}' | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
      - uses: actions/download-artifact@v2
        with:
          name: ${{ steps.prep.outputs.user }}-${{ steps.prep.outputs.repo }}_${{ steps.prep.outputs.version }}.deb
      - name: Prepare Version
        id: prep
        run: |
          echo ::set-output name=user::$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=repo::$(echo "${{ github.repository }}" | awk -F / '{print $2}' | tr '[:upper:]' '[:lower:]')
          echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
      - name: Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ steps.prep.outputs.user }}-${{ steps.prep.outputs.repo }}_${{ steps.prep.outputs.version }}.deb

